from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from asgiref.sync import sync_to_async

from subscriptions.models import CoinSnapshot
from bot.handlers.subscribe import cmd_subscribe

router = Router()

@router.message(Command("list"))
async def list_cmd(message: Message):
    coins = await sync_to_async(lambda: list(CoinSnapshot.objects.order_by("-market_cap")[:10]))()

    if not coins:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{c.name} ({c.symbol.upper()})", callback_data=c.coingecko_id)]
            for c in coins
        ] + [
            [InlineKeyboardButton(text="üìä –ü—Ä–æ–≥–Ω–æ–∑", callback_data="predict")],
            [InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="list2")],
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ ID", callback_data="subscribe")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="h0me")]
        ]
    )
    await message.answer("üìà –¢–æ–ø‚Äë10 –º–æ–Ω–µ—Ç:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=keyboard)



# –ö–Ω–æ–ø–∫–∞ ¬´–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞¬ª
@router.callback_query(F.data == "list2")
async def list_page_2(query: CallbackQuery):
    coins = await sync_to_async(lambda: list(CoinSnapshot.objects.order_by("-market_cap")[10:20]))()

    if not coins:
        await query.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{c.name} ({c.symbol.upper()})", callback_data=c.coingecko_id)]
            for c in coins
        ] + [
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="list")],
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ ID", callback_data="subscribe")],
            [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="h0me")]
        ]
    )
    await query.message.edit_text("üìà –ú–æ–Ω–µ—Ç—ã 11‚Äì20 –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏:", reply_markup=keyboard)
    await query.answer()



# –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ —Å–ø–∏—Å–∫–∞
@router.callback_query(F.data == "list")
async def list_callback(query: CallbackQuery):
    await list_cmd(query.message)
    await query.answer()


# –ö–Ω–æ–ø–∫–∞ ¬´–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ ID¬ª
@router.callback_query(F.data == "subscribe")
async def inline_subscribe_cb(query: CallbackQuery, state: FSMContext):
    await cmd_subscribe(query.message, state)
    await query.answer()


# –ú–µ–Ω—é –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
@router.callback_query(F.data == "predict")
async def prediction_menu(query: CallbackQuery):
    coins = await sync_to_async(lambda: list(CoinSnapshot.objects.order_by("-market_cap")[:10]))()

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{c.name} ({c.symbol.upper()})", callback_data=f"predict:{c.coingecko_id}")]
            for c in coins
        ] + [
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="list")]
        ]
    )

    await query.message.edit_text("üîÆ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=keyboard)
    await query.answer()

from ai_prediction.generate_forecast import generate_coin_forecast  # –ø—É—Ç—å –ø–æ–¥–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç–µ
@router.callback_query(lambda q: q.data.startswith("predict:"))
async def predict_coin_forecast(query: CallbackQuery):
    coin_id = query.data.split(":", 1)[1]

    await query.message.edit_text(f"üîÆ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ò–ò‚Äë–ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è *{coin_id.upper()}*...")

    forecast = await generate_coin_forecast(coin_id)

    await query.message.answer(f"üìä –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –º–æ–Ω–µ—Ç–µ *{coin_id.upper()}*:\n\n{forecast}", parse_mode="Markdown")
    await query.answer()
