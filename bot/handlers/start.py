from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from asgiref.sync import sync_to_async
from subscriptions.models import BotUser

router = Router()

@router.message(Command("start"))  # –° –ø–æ–º–æ—â—å—é –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è # –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –∫–æ–º–∞–Ω–¥–µ /start
async def start_hand(message: types.Message):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user, created = await sync_to_async(BotUser.objects.get_or_create)(
        telegram_id=message.from_user.id
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üè† /start", callback_data="start"),
            InlineKeyboardButton(text="üìà /list", callback_data="list"),
        ],
        [
            InlineKeyboardButton(text=" /subscribe", callback_data="sub"),
            InlineKeyboardButton(text=" /delete", callback_data="dell"),
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è /settings", callback_data="settings"),
            InlineKeyboardButton(text="‚ùì /faq", callback_data="faq"),
        ],
    ])

    help_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏.\n\n"
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/list - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        "/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ–Ω–µ—Ç—É, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø–æ –ø–æ–∏—Å–∫—É\n"
        "/delete - —É–¥–∞–ª–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
        "/faq - —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–µ –≤—Ä—É—á–Ω—É—é."
    )

    await message.answer(text=help_text, reply_markup=keyboard)



@router.callback_query(lambda c: c.data == "start")
async def process_start_callback(callback_query: CallbackQuery):
    await start_hand(callback_query.message)
    await callback_query.answer()