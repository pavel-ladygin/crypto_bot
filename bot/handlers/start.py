from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from asgiref.sync import sync_to_async
from subscriptions.models import BotUser

router = Router()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.message(Command("home"))  # –° –ø–æ–º–æ—â—å—é –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è # –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –∫–æ–º–∞–Ω–¥–µ /start
async def start_hand(message: types.Message):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user, created = await sync_to_async(BotUser.objects.get_or_create)(
        telegram_id=message.from_user.id
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üè† /home", callback_data="start"),
            InlineKeyboardButton(text="üìà /list", callback_data="list"),
        ],
        [
            InlineKeyboardButton(text="‚úÖ /subscribe", callback_data="subscribe"),
            InlineKeyboardButton(text="üìù /subscriptions", callback_data="subscriptions"),
        ],
        [
            InlineKeyboardButton(text="‚ùå /delete", callback_data="delete"),
            InlineKeyboardButton(text="‚ùì /faq", callback_data="faq"),
        ],
    ])

    help_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏.\n\n"
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "üè† /home - –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±–æ—Ç–∞\n"
        "üìà /list - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –≤–∞–º –º–æ–Ω–µ—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞!\n"
        "‚úÖ /subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ–Ω–µ—Ç—É, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø–æ –ø–æ–∏—Å–∫—É, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–π –º–æ–Ω–µ—Ç—ã!\n"
        "üìù /subscriptions - —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å\n"
        "‚ùå /delete - —É–¥–∞–ª–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏–∑ –≤–∞—à–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "‚ùì /faq - —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–µ –≤—Ä—É—á–Ω—É—é."
    )

    await message.answer(text=help_text, reply_markup=keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –¥–æ–º–æ–π –ø–æ –∫–Ω–æ–ø–∫–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ h0me, –∞ –Ω–µ home, –ø–æ—Ç–æ–º—É —á—Ç–æ –µ—Å—Ç—å –∫—Ä–∏–ø—Ç–∞ HOME)
@router.callback_query(lambda c: c.data == "h0me")
async def process_start_callback(callback_query: CallbackQuery):
    await start_hand(callback_query.message)
    await callback_query.answer()

@router.message(Command("home"))
async def process_start_callback(message: types.Message):
    await start_hand(message)
    await message.answer()